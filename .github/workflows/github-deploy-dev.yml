# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
name: Node.js CI

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - "README.md"
      - ".gitignore"
      - ".github/**"

jobs:
  # Label of the container job
  tester:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: rust

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: make test
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          DATABASE_URL: postgres://root:postgres@postgres:5432/postgres
  deploy:
    runs-on: ubuntu-latest
    needs: tester
    steps:
    - uses: actions/checkout@v2
    - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
      with:
        heroku_api_key: ${{ secrets.DEV_HEROKU_API_KEY }}
        heroku_app_name: ""
        heroku_email: "benjamin.j.cape.22@dartmouth.com"
        justlogin: true
    - run: make deploy
      env:
        SENDGRID_KEY: ${{ secrets.SENDGRID_KEY }}
        STAGE: dev
  appsJson:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.js.outputs.content }}
    steps:
      - uses: actions/checkout@v2
      - name: Step 1
        id: js
        uses: juliangruber/read-file-action@v1 
        with: 
          path: config.json
  deploy-apps:
    runs-on: ubuntu-latest
    needs: [deploy, appsJson]
    strategy:
      max-parallel: 1
      matrix:
        app-name: ${{ fromJSON(needs.appsJson.outputs.config).dev }}
    steps:
    - uses: actions/checkout@v2
    - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
      with:
        heroku_api_key: ${{ secrets.DEV_HEROKU_API_KEY }}
        heroku_app_name: "${{ matrix.app-name.name }}"
        heroku_email: "benjamin.j.cape.22@dartmouth.com" 